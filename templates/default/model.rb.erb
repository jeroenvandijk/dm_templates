class <%= class_name %> < ActiveRecord::Base
	## ASSOCIATIONS
<% supported_associations.each do |type| -%>
<% eval("#{type}_associations_with_options").each do |name_with_options| -%>
	<%= type + " " + name_with_options %>
<% end %>
<% end %>
	## RESTRICTIONS
	attr_accessible <%= attribute_symbols.join(",\n" + "\t" * 9) %> 

	## CALLBACKS

	## DELEGATES

	## ACCESSORS

	## NAMED_SCOPES

	## PRESENCE VALIDATIONS
	validates_presence_of <%= (attribute_symbols - boolean_attribute_symbols).join(",\n" + "\t" * 12) %>
<%#validates_presence_of <%= (all_field_names - boolean_attribute_symbols).join(",\n" + "\t" * 12) -%>

<% unless boolean_attribute_symbols.empty? %>
	with_options :minimum => 1 do |w|
<% string_attribute_symbols.each do |attr| -%>
		w.validates_length_of <%= attr %>
<% end -%>
	end
<% end -%>
	
<% boolean_attribute_symbols.each do |attr| -%>
	validates_inclusion_of <%= attr %>, in => [true, false] %>
<% end -%>

	## ASSOCIATED VALIDATIONS
<% unless belongs_to_association_names.empty? -%>
	<%# validates_associated <%= association_names.join(",\n" + "\t" * 12) %>
<% end -%>

	## FORMAT VALIDATIONS
	with_options :allow_nil => true, :allow_blank => true do |w|
		# TODO add formatting validations
	end
	
	## VIRTUAL ATTRIBUTES
	
	## NORMAL METHODS
	def self.find_by_params(params = {})
		scope = scoped({})
<% attribute_symbols.each do |field| -%>
		scope = scope.scoped :conditions => { <%= field %> => params[<%= field %>] } if params[<%= field %>]
<% end -%>
		scope.find(:all) ## TODO replace this with a proper search generic find code here
	end
end
