<%= model.define_model %>
	## ASSOCIATIONS
  <%#= model.define_associations %>

	## RESTRICTIONS
  <%# model.define_accessible_attributes %>

	## CALLBACKS

	## DELEGATES

	## ACCESSORS

	## NAMED_SCOPES

	## PRESENCE VALIDATIONS
  <%#= model.presence_validations %>

	## ASSOCIATED VALIDATIONS
  <%#= model.association_validations %>

	## FORMAT VALIDATIONS
	with_options :allow_nil => true, :allow_blank => true do |w|
		<%#= model.format_validations :indent => 2 %>
	end
	
	## VIRTUAL ATTRIBUTES
	
  ## CLASS METHODS
	def self.find_by_params(params = {}, options = {})
    scope = scope_by_params(params, options)
    options[:paginate] ? scope.paginate(:all, params[:page] || 1) : scope.find(:all)
  end
  
  def self.count_by_params(params,options)
    scope_by_params(params, options).count
  end
  
  def self.scope_by_params(params = {}, options = {})
    ## TODO replace this with a proper search generic find code here
		scope = scoped({})
<%# model.attribute_symbols.each do |field| -%>
		scope = scope.scoped :conditions => { <%#= field %> => params[<%#= field %>] } if params[<%#= field %>]
<%# end -%>
		scope

	end
	
	## NORMAL METHODS
end
